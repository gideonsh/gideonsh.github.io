{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gideo\\\\Desktop\\\\home_test\\\\src\\\\components\\\\RecordButton.js\";\nimport classes from \"./RecordButton.module.css\";\nimport React, { Component } from \"react\";\nimport MicRecorder from \"mic-recorder-to-mp3\"; //const RecordButton = (props) => {\n// return (\n//   <div className={classes.line}>\n//     {props.state && (\n//       <button className={classes.pad} onClick={props.onHideSession}>\n//         <p>{props.name}</p>\n//         <span>On</span>\n//       </button>\n//     )}\n//     {!props.state && (\n//       <button className={classes.pad} onClick={props.onShowSession}>\n//         <p>{props.name}</p>\n//         <span>Off</span>\n//       </button>\n//     )}\n//   </div>\n// );\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Mp3Recorder = new MicRecorder({\n  bitRate: 120\n});\nexport default class Audio extends Component {\n  constructor(props) {\n    super(props);\n    /*\r\n     * declare states that will enable and disable\r\n     * buttons that controls the audio widget\r\n     */\n\n    this.state = {\n      isRecording: false,\n      blobURL: \"\",\n      isBlocked: false,\n      isRecordingStp: false\n    }; //binds the methods to the component\n\n    this.start = this.start.bind(this);\n    this.stop = this.stop.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  componentDidMount() {\n    //Prompt the user for permission to allow audio device in browser\n    navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia; //Detects the action on user click to allow or deny permission of audio device\n\n    navigator.getUserMedia({\n      audio: true\n    }, () => {\n      console.log(\"Permission Granted\");\n      this.setState({\n        isBlocked: false\n      });\n    }, () => {\n      console.log(\"Permission Denied\");\n      this.setState({\n        isBlocked: true\n      });\n    });\n  }\n\n  start() {\n    /*\r\n     * If the user denys permission to use the audio device\r\n     * in the browser no recording can be done and an alert is shown\r\n     * If the user allows permission the recoding will begin\r\n     */\n    if (this.state.isBlocked) {\n      alert(\"Permission Denied\");\n    } else {\n      Mp3Recorder.start().then(() => {\n        this.setState({\n          isRecording: true\n        });\n      }).catch(e => console.error(e));\n    }\n  }\n\n  stop() {\n    /*\r\n     * Once the recoding starts the stop button is activated\r\n     * Click stop once recording as finished\r\n     * An MP3 is generated for the user to download the audio\r\n     */\n    Mp3Recorder.stop().getMp3().then(([buffer, blob]) => {\n      const blobURL = URL.createObjectURL(blob);\n      this.setState({\n        blobURL,\n        isRecording: false\n      });\n      this.setState({\n        isRecordingStp: true\n      });\n    }).catch(e => console.log(e));\n  }\n\n  reset() {\n    /*\r\n     * The user can reset the audio recording\r\n     * once the stop button is clicked\r\n     */\n    document.getElementsByTagName(\"audio\")[0].src = \"\";\n    this.setState({\n      isRecordingStp: false\n    });\n  }\n\n  render() {\n    //display view of audio widget and control buttons\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row d-flex justify-content-center mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-light\",\n        onClick: this.start,\n        disabled: this.state.isRecording,\n        children: \"Record\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-danger\",\n        onClick: this.stop,\n        disabled: !this.state.isRecording,\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-warning\",\n        onClick: this.reset,\n        disabled: !this.state.isRecordingStp,\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        src: this.state.blobURL,\n        controls: \"controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  }\n\n} //};\n//export default RecordButton;","map":{"version":3,"sources":["C:/Users/gideo/Desktop/home_test/src/components/RecordButton.js"],"names":["classes","React","Component","MicRecorder","Mp3Recorder","bitRate","Audio","constructor","props","state","isRecording","blobURL","isBlocked","isRecordingStp","start","bind","stop","reset","componentDidMount","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","audio","console","log","setState","alert","then","catch","e","error","getMp3","buffer","blob","URL","createObjectURL","document","getElementsByTagName","src","render"],"mappings":"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","sourcesContent":["import classes from \"./RecordButton.module.css\";\r\nimport React, { Component } from \"react\";\r\nimport MicRecorder from \"mic-recorder-to-mp3\";\r\n\r\n//const RecordButton = (props) => {\r\n// return (\r\n//   <div className={classes.line}>\r\n//     {props.state && (\r\n//       <button className={classes.pad} onClick={props.onHideSession}>\r\n//         <p>{props.name}</p>\r\n//         <span>On</span>\r\n//       </button>\r\n//     )}\r\n//     {!props.state && (\r\n//       <button className={classes.pad} onClick={props.onShowSession}>\r\n//         <p>{props.name}</p>\r\n//         <span>Off</span>\r\n//       </button>\r\n//     )}\r\n//   </div>\r\n// );\r\n\r\nconst Mp3Recorder = new MicRecorder({ bitRate: 120 });\r\n\r\nexport default class Audio extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /*\r\n     * declare states that will enable and disable\r\n     * buttons that controls the audio widget\r\n     */\r\n    this.state = {\r\n      isRecording: false,\r\n      blobURL: \"\",\r\n      isBlocked: false,\r\n      isRecordingStp: false,\r\n    };\r\n    //binds the methods to the component\r\n    this.start = this.start.bind(this);\r\n    this.stop = this.stop.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    //Prompt the user for permission to allow audio device in browser\r\n    navigator.getUserMedia =\r\n      navigator.getUserMedia ||\r\n      navigator.webkitGetUserMedia ||\r\n      navigator.mozGetUserMedia ||\r\n      navigator.msGetUserMedia;\r\n    //Detects the action on user click to allow or deny permission of audio device\r\n    navigator.getUserMedia(\r\n      { audio: true },\r\n      () => {\r\n        console.log(\"Permission Granted\");\r\n        this.setState({ isBlocked: false });\r\n      },\r\n      () => {\r\n        console.log(\"Permission Denied\");\r\n        this.setState({ isBlocked: true });\r\n      }\r\n    );\r\n  }\r\n  start() {\r\n    /*\r\n     * If the user denys permission to use the audio device\r\n     * in the browser no recording can be done and an alert is shown\r\n     * If the user allows permission the recoding will begin\r\n     */\r\n    if (this.state.isBlocked) {\r\n      alert(\"Permission Denied\");\r\n    } else {\r\n      Mp3Recorder.start()\r\n        .then(() => {\r\n          this.setState({ isRecording: true });\r\n        })\r\n        .catch((e) => console.error(e));\r\n    }\r\n  }\r\n  stop() {\r\n    /*\r\n     * Once the recoding starts the stop button is activated\r\n     * Click stop once recording as finished\r\n     * An MP3 is generated for the user to download the audio\r\n     */\r\n    Mp3Recorder.stop()\r\n      .getMp3()\r\n      .then(([buffer, blob]) => {\r\n        const blobURL = URL.createObjectURL(blob);\r\n        this.setState({ blobURL, isRecording: false });\r\n        this.setState({ isRecordingStp: true });\r\n      })\r\n      .catch((e) => console.log(e));\r\n  }\r\n  reset() {\r\n    /*\r\n     * The user can reset the audio recording\r\n     * once the stop button is clicked\r\n     */\r\n    document.getElementsByTagName(\"audio\")[0].src = \"\";\r\n    this.setState({ isRecordingStp: false });\r\n  }\r\n  render() {\r\n    //display view of audio widget and control buttons\r\n    return (\r\n      <div className=\"row d-flex justify-content-center mt-5\">\r\n        <button\r\n          className=\"btn btn-light\"\r\n          onClick={this.start}\r\n          disabled={this.state.isRecording}\r\n        >\r\n          Record\r\n        </button>\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={this.stop}\r\n          disabled={!this.state.isRecording}\r\n        >\r\n          Stop\r\n        </button>\r\n        <button\r\n          className=\"btn btn-warning\"\r\n          onClick={this.reset}\r\n          disabled={!this.state.isRecordingStp}\r\n        >\r\n          Reset\r\n        </button>\r\n        <audio src={this.state.blobURL} controls=\"controls\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//};\r\n\r\n//export default RecordButton;\r\n"]},"metadata":{},"sourceType":"module"}