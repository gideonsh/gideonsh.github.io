{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gideo\\\\Desktop\\\\home_test\\\\src\\\\components\\\\MultiPlayer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./MultiPlayer.module.css\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useMultiAudio = (urls, playIsOn) => {\n  _s();\n\n  const [seconds, setSeconds] = useState(0);\n  const [toggleOccurd, setToggleOccurd] = useState(false);\n  const [songIndex, setSongIndex] = useState();\n  const [sources] = useState(urls.map(url => {\n    return {\n      url,\n      audio: new Audio(url)\n    };\n  }));\n  const [players, setPlayers] = useState(urls.map(url => {\n    return {\n      url,\n      playing: false\n    };\n  }));\n  useEffect(() => {\n    const togTimer = setTimeout(() => {\n      const newPlayers = [...players];\n\n      if (newPlayers[targetIndex].playing === false) {\n        newPlayers[targetIndex].playing = true;\n        setPlayers(newPlayers);\n      }\n    }, seconds * 1000);\n    return () => clearTimeout(togTimer);\n  }, [toggleOccurd]);\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n\n    if (newPlayers[targetIndex].playing === false) {\n      newPlayers[targetIndex].playing = true;\n      setToggleOccurd(true); //   setTimeout(() => {\n      //     setPlayers(newPlayers);\n      //   }, 10000);\n    } else {\n      newPlayers[targetIndex].playing = false;\n      setPlayers(newPlayers);\n    } //setPlayers(newPlayers);\n\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    if (playIsOn) {\n      sources.forEach((source, i) => {\n        players[i].playing ? source.audio.play() : source.audio.pause();\n      });\n      setSeconds(8);\n    } else {\n      sources.forEach((source, i) => {\n        source.audio.pause();\n      });\n    }\n  });\n  return [players, toggle];\n};\n\n_s(useMultiAudio, \"a+0Kt5f5LsOy0cjSggmI86XRYCk=\");\n\nconst MultiPlayer = props => {\n  _s2();\n\n  const [players, toggle] = useMultiAudio(props.urls, props.playIsOn);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: players.map((player, i) => /*#__PURE__*/_jsxDEV(Player, {\n      player: player,\n      toggle: toggle(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MultiPlayer, \"CfYgjYeTyjzOoInnRblJVR3vUyk=\", false, function () {\n  return [useMultiAudio];\n});\n\n_c = MultiPlayer;\nexport default MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["C:/Users/gideo/Desktop/home_test/src/components/MultiPlayer.js"],"names":["React","useState","useEffect","classes","Player","useMultiAudio","urls","playIsOn","seconds","setSeconds","toggleOccurd","setToggleOccurd","songIndex","setSongIndex","sources","map","url","audio","Audio","players","setPlayers","playing","togTimer","setTimeout","newPlayers","targetIndex","clearTimeout","toggle","currentIndex","findIndex","p","interval","setInterval","clearInterval","forEach","source","i","play","pause","MultiPlayer","props","player"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./MultiPlayer.module.css\";\r\nimport Player from \"./Player\";\r\n\r\nconst useMultiAudio = (urls, playIsOn) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n  const [toggleOccurd, setToggleOccurd] = useState(false);\r\n  const [songIndex, setSongIndex] = useState();\r\n\r\n  const [sources] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        audio: new Audio(url),\r\n      };\r\n    })\r\n  );\r\n\r\n  const [players, setPlayers] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        playing: false,\r\n      };\r\n    })\r\n  );\r\n\r\n  useEffect(() => {\r\n    const togTimer = setTimeout(() => {\r\n      const newPlayers = [...players];\r\n      if (newPlayers[targetIndex].playing === false) {\r\n        newPlayers[targetIndex].playing = true;\r\n        setPlayers(newPlayers);\r\n      }\r\n    }, seconds * 1000);\r\n    return () => clearTimeout(togTimer);\r\n  }, [toggleOccurd]);\r\n\r\n  const toggle = (targetIndex) => () => {\r\n    const newPlayers = [...players];\r\n    const currentIndex = players.findIndex((p) => p.playing === true);\r\n    if (newPlayers[targetIndex].playing === false) {\r\n      newPlayers[targetIndex].playing = true;\r\n      setToggleOccurd(true);\r\n      //   setTimeout(() => {\r\n      //     setPlayers(newPlayers);\r\n      //   }, 10000);\r\n    } else {\r\n      newPlayers[targetIndex].playing = false;\r\n      setPlayers(newPlayers);\r\n    }\r\n\r\n    //setPlayers(newPlayers);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(seconds - 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (playIsOn) {\r\n      sources.forEach((source, i) => {\r\n        players[i].playing ? source.audio.play() : source.audio.pause();\r\n      });\r\n      setSeconds(8);\r\n    } else {\r\n      sources.forEach((source, i) => {\r\n        source.audio.pause();\r\n      });\r\n    }\r\n  });\r\n\r\n  return [players, toggle];\r\n};\r\n\r\nconst MultiPlayer = (props) => {\r\n  const [players, toggle] = useMultiAudio(props.urls, props.playIsOn);\r\n\r\n  return (\r\n    <div>\r\n      {players.map((player, i) => (\r\n        <Player key={i} player={player} toggle={toggle(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiPlayer;\r\n"]},"metadata":{},"sourceType":"module"}