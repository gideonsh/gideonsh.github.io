{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gideo\\\\Desktop\\\\home_test\\\\src\\\\components\\\\RecordButton.js\";\nimport classes from \"./RecordButton.module.css\"; //import React, { Component } from \"react\";\n//import MicRecorder from \"mic-recorder-to-mp3\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RecordButton = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.line,\n    children: [props.state && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.pad,\n      onClick: props.onHideSession,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"On\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }, this), !props.state && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: classes.pad,\n      onClick: props.onShowSession,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"Off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n};\n\n_c = RecordButton;\nexport default RecordButton; // const Mp3Recorder = new MicRecorder({ bitRate: 128 });\n//   export default class Audio extends Component {\n//     constructor(props) {\n//       super(props);\n//       /*\n//        * declare states that will enable and disable\n//        * buttons that controls the audio widget\n//        */\n//       this.state = {\n//           isRecording: false,\n//           blobURL: '',\n//           isBlocked: false,\n//           isRecordingStp: false,\n//         }\n//       //binds the methods to the component\n//       this.start = this.start.bind(this);\n//       this.stop = this.stop.bind(this);\n//       this.reset = this.reset.bind(this);\n//      }\n//     componentDidMount(){\n//       //Prompt the user for permission to allow audio device in browser\n//       navigator.getUserMedia = (\n//         navigator.getUserMedia ||\n//         navigator.webkitGetUserMedia ||\n//         navigator.mozGetUserMedia ||\n//         navigator.msGetUserMedia\n//        );\n//        //Detects the action on user click to allow or deny permission of audio device\n//        navigator.getUserMedia({ audio: true },\n//         () => {\n//           console.log('Permission Granted');\n//           this.setState({ isBlocked: false });\n//         },\n//         () => {\n//           console.log('Permission Denied');\n//           this.setState({ isBlocked: true })\n//         },\n//       );\n//     }\n//     start(){\n//       /*\n//        * If the user denys permission to use the audio device\n//        * in the browser no recording can be done and an alert is shown\n//        * If the user allows permission the recoding will begin\n//        */\n//       if (this.state.isBlocked) {\n//         alert('Permission Denied');\n//       } else {\n//         Mp3Recorder\n//           .start()\n//           .then(() => {\n//             this.setState({ isRecording: true });\n//           }).catch((e) => console.error(e));\n//       }\n//     }\n//     stop() {\n//        /*\n//        * Once the recoding starts the stop button is activated\n//        * Click stop once recording as finished\n//        * An MP3 is generated for the user to download the audio\n//        */\n//       Mp3Recorder\n//         .stop()\n//         .getMp3()\n//         .then(([buffer, blob]) => {\n//           const blobURL = URL.createObjectURL(blob)\n//           this.setState({ blobURL, isRecording: false });\n//           this.setState({ isRecordingStp: true });\n//         }).catch((e) => console.log(e));\n//     };\n//     reset() {\n//         /*\n//          * The user can reset the audio recording\n//          * once the stop button is clicked\n//          */\n//         document.getElementsByTagName('audio')[0].src = '';\n//         this.setState({ isRecordingStp: false });\n//     };\n//     render() {\n//       //display view of audio widget and control buttons\n//       return(\n//     <div className=\"row d-flex justify-content-center mt-5\">\n//     <button className=\"btn btn-light\" onClick={this.start} disabled={this.state.isRecording}>Record</button>\n//     <button className=\"btn btn-danger\" onClick={this.stop} disabled={!this.state.isRecording}>Stop</button>\n//     <button className=\"btn btn-warning\" onClick={this.reset} disabled={!this.state.isRecordingStp}>Reset</button>\n//     <audio src={this.state.blobURL} controls=\"controls\" />\n//     </div>\n//       );\n//     }\n//   }\n\nvar _c;\n\n$RefreshReg$(_c, \"RecordButton\");","map":{"version":3,"sources":["C:/Users/gideo/Desktop/home_test/src/components/RecordButton.js"],"names":["classes","RecordButton","props","line","state","pad","onHideSession","name","onShowSession"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,2BAApB,C,CACA;AACA;;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,sBACE;AAAK,IAAA,SAAS,EAAEF,OAAO,CAACG,IAAxB;AAAA,eACGD,KAAK,CAACE,KAAN,iBACC;AAAQ,MAAA,SAAS,EAAEJ,OAAO,CAACK,GAA3B;AAAgC,MAAA,OAAO,EAAEH,KAAK,CAACI,aAA/C;AAAA,8BACE;AAAA,kBAAIJ,KAAK,CAACK;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAOG,CAACL,KAAK,CAACE,KAAP,iBACC;AAAQ,MAAA,SAAS,EAAEJ,OAAO,CAACK,GAA3B;AAAgC,MAAA,OAAO,EAAEH,KAAK,CAACM,aAA/C;AAAA,8BACE;AAAA,kBAAIN,KAAK,CAACK;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAjBD;;KAAMN,Y;AAmBN,eAAeA,YAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import classes from \"./RecordButton.module.css\";\r\n//import React, { Component } from \"react\";\r\n//import MicRecorder from \"mic-recorder-to-mp3\";\r\n\r\nconst RecordButton = (props) => {\r\n  return (\r\n    <div className={classes.line}>\r\n      {props.state && (\r\n        <button className={classes.pad} onClick={props.onHideSession}>\r\n          <p>{props.name}</p>\r\n          <span>On</span>\r\n        </button>\r\n      )}\r\n      {!props.state && (\r\n        <button className={classes.pad} onClick={props.onShowSession}>\r\n          <p>{props.name}</p>\r\n          <span>Off</span>\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordButton;\r\n\r\n// const Mp3Recorder = new MicRecorder({ bitRate: 128 });\r\n\r\n//   export default class Audio extends Component {\r\n//     constructor(props) {\r\n//       super(props);\r\n//       /*\r\n//        * declare states that will enable and disable\r\n//        * buttons that controls the audio widget\r\n//        */\r\n//       this.state = {\r\n//           isRecording: false,\r\n//           blobURL: '',\r\n//           isBlocked: false,\r\n//           isRecordingStp: false,\r\n//         }\r\n//       //binds the methods to the component\r\n//       this.start = this.start.bind(this);\r\n//       this.stop = this.stop.bind(this);\r\n//       this.reset = this.reset.bind(this);\r\n//      }\r\n//     componentDidMount(){\r\n//       //Prompt the user for permission to allow audio device in browser\r\n//       navigator.getUserMedia = (\r\n//         navigator.getUserMedia ||\r\n//         navigator.webkitGetUserMedia ||\r\n//         navigator.mozGetUserMedia ||\r\n//         navigator.msGetUserMedia\r\n//        );\r\n//        //Detects the action on user click to allow or deny permission of audio device\r\n//        navigator.getUserMedia({ audio: true },\r\n//         () => {\r\n//           console.log('Permission Granted');\r\n//           this.setState({ isBlocked: false });\r\n//         },\r\n//         () => {\r\n//           console.log('Permission Denied');\r\n//           this.setState({ isBlocked: true })\r\n//         },\r\n//       );\r\n//     }\r\n//     start(){\r\n//       /*\r\n//        * If the user denys permission to use the audio device\r\n//        * in the browser no recording can be done and an alert is shown\r\n//        * If the user allows permission the recoding will begin\r\n//        */\r\n//       if (this.state.isBlocked) {\r\n//         alert('Permission Denied');\r\n//       } else {\r\n//         Mp3Recorder\r\n//           .start()\r\n//           .then(() => {\r\n//             this.setState({ isRecording: true });\r\n//           }).catch((e) => console.error(e));\r\n//       }\r\n//     }\r\n//     stop() {\r\n//        /*\r\n//        * Once the recoding starts the stop button is activated\r\n//        * Click stop once recording as finished\r\n//        * An MP3 is generated for the user to download the audio\r\n//        */\r\n//       Mp3Recorder\r\n//         .stop()\r\n//         .getMp3()\r\n//         .then(([buffer, blob]) => {\r\n//           const blobURL = URL.createObjectURL(blob)\r\n//           this.setState({ blobURL, isRecording: false });\r\n//           this.setState({ isRecordingStp: true });\r\n//         }).catch((e) => console.log(e));\r\n//     };\r\n//     reset() {\r\n//         /*\r\n//          * The user can reset the audio recording\r\n//          * once the stop button is clicked\r\n//          */\r\n//         document.getElementsByTagName('audio')[0].src = '';\r\n//         this.setState({ isRecordingStp: false });\r\n//     };\r\n//     render() {\r\n//       //display view of audio widget and control buttons\r\n//       return(\r\n//     <div className=\"row d-flex justify-content-center mt-5\">\r\n//     <button className=\"btn btn-light\" onClick={this.start} disabled={this.state.isRecording}>Record</button>\r\n//     <button className=\"btn btn-danger\" onClick={this.stop} disabled={!this.state.isRecording}>Stop</button>\r\n//     <button className=\"btn btn-warning\" onClick={this.reset} disabled={!this.state.isRecordingStp}>Reset</button>\r\n//     <audio src={this.state.blobURL} controls=\"controls\" />\r\n//     </div>\r\n//       );\r\n//     }\r\n//   }\r\n"]},"metadata":{},"sourceType":"module"}