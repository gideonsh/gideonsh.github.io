{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gideo\\\\Desktop\\\\home_test\\\\src\\\\components\\\\MultiPlayer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./MultiPlayer.module.css\";\nimport Player from \"./components/Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useMultiAudio = urls => {\n  _s();\n\n  const [sources] = useState(urls.map(url => {\n    return {\n      url,\n      audio: new Audio(url)\n    };\n  }));\n  const [players, setPlayers] = useState(urls.map(url => {\n    return {\n      url,\n      playing: false\n    };\n  }));\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n\n    if (newPlayers[targetIndex].playing === false) {\n      newPlayers[targetIndex].playing = true;\n    } else {\n      newPlayers[targetIndex].playing = false;\n    } // if (currentIndex !== -1 && currentIndex !== targetIndex) {\n    //   newPlayers[currentIndex].playing = true;\n    //   newPlayers[targetIndex].playing = true;\n    // } else if (currentIndex !== -1) {\n    //   newPlayers[targetIndex].playing = false;\n    // } else {\n    //   newPlayers[targetIndex].playing = true;\n    // }\n\n\n    setPlayers(newPlayers);\n  };\n\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      players[i].playing ? source.audio.play() : source.audio.pause();\n    });\n  }, [sources, players]);\n  useEffect(() => {\n    sources.forEach((source, i) => {\n      source.audio.addEventListener(\"ended\", () => {\n        const newPlayers = [...players];\n        newPlayers[i].playing = false;\n        setPlayers(newPlayers);\n      });\n    });\n    return () => {\n      sources.forEach((source, i) => {\n        source.audio.removeEventListener(\"ended\", () => {\n          const newPlayers = [...players];\n          newPlayers[i].playing = false;\n          setPlayers(newPlayers);\n        });\n      });\n    };\n  }, []);\n  return [players, toggle];\n};\n\n_s(useMultiAudio, \"hRo95/pElYx/ya8ejB0AxMPR3UI=\");\n\nconst MultiPlayer = props => {\n  _s2();\n\n  const [players, toggle] = useMultiAudio(props.urls);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: players.map((player, i) => /*#__PURE__*/_jsxDEV(Player, {\n      player: player,\n      toggle: toggle(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}; // const Player = ({ player, toggle }) => (\n//   <button className={classes.pad} onClick={toggle}>\n//     {player.playing ? \"On\" : \"Off\"}\n//   </button>\n// );\n\n\n_s2(MultiPlayer, \"CfYgjYeTyjzOoInnRblJVR3vUyk=\", false, function () {\n  return [useMultiAudio];\n});\n\n_c = MultiPlayer;\nexport default MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["C:/Users/gideo/Desktop/home_test/src/components/MultiPlayer.js"],"names":["React","useState","useEffect","classes","Player","useMultiAudio","urls","sources","map","url","audio","Audio","players","setPlayers","playing","toggle","targetIndex","newPlayers","currentIndex","findIndex","p","forEach","source","i","play","pause","addEventListener","removeEventListener","MultiPlayer","props","player"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./MultiPlayer.module.css\";\r\nimport Player from \"./components/Player\";\r\n\r\nconst useMultiAudio = (urls) => {\r\n  const [sources] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        audio: new Audio(url),\r\n      };\r\n    })\r\n  );\r\n\r\n  const [players, setPlayers] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        playing: false,\r\n      };\r\n    })\r\n  );\r\n\r\n  const toggle = (targetIndex) => () => {\r\n    const newPlayers = [...players];\r\n    const currentIndex = players.findIndex((p) => p.playing === true);\r\n    if (newPlayers[targetIndex].playing === false) {\r\n      newPlayers[targetIndex].playing = true;\r\n    } else {\r\n      newPlayers[targetIndex].playing = false;\r\n    }\r\n\r\n    // if (currentIndex !== -1 && currentIndex !== targetIndex) {\r\n    //   newPlayers[currentIndex].playing = true;\r\n    //   newPlayers[targetIndex].playing = true;\r\n    // } else if (currentIndex !== -1) {\r\n    //   newPlayers[targetIndex].playing = false;\r\n    // } else {\r\n    //   newPlayers[targetIndex].playing = true;\r\n    // }\r\n    setPlayers(newPlayers);\r\n  };\r\n\r\n  useEffect(() => {\r\n    sources.forEach((source, i) => {\r\n      players[i].playing ? source.audio.play() : source.audio.pause();\r\n    });\r\n  }, [sources, players]);\r\n\r\n  useEffect(() => {\r\n    sources.forEach((source, i) => {\r\n      source.audio.addEventListener(\"ended\", () => {\r\n        const newPlayers = [...players];\r\n        newPlayers[i].playing = false;\r\n        setPlayers(newPlayers);\r\n      });\r\n    });\r\n    return () => {\r\n      sources.forEach((source, i) => {\r\n        source.audio.removeEventListener(\"ended\", () => {\r\n          const newPlayers = [...players];\r\n          newPlayers[i].playing = false;\r\n          setPlayers(newPlayers);\r\n        });\r\n      });\r\n    };\r\n  }, []);\r\n\r\n  return [players, toggle];\r\n};\r\n\r\nconst MultiPlayer = (props) => {\r\n  const [players, toggle] = useMultiAudio(props.urls);\r\n\r\n  return (\r\n    <div>\r\n      {players.map((player, i) => (\r\n        <Player key={i} player={player} toggle={toggle(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const Player = ({ player, toggle }) => (\r\n//   <button className={classes.pad} onClick={toggle}>\r\n//     {player.playing ? \"On\" : \"Off\"}\r\n//   </button>\r\n// );\r\n\r\nexport default MultiPlayer;\r\n"]},"metadata":{},"sourceType":"module"}