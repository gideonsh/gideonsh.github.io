{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gideo\\\\Desktop\\\\home_test\\\\src\\\\components\\\\MultiPlayer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./MultiPlayer.module.css\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useMultiAudio = (urls, playIsOn) => {\n  _s();\n\n  const [seconds, setSeconds] = useState(0);\n  const [sources] = useState(urls.map(url => {\n    return {\n      url,\n      audio: new Audio(url)\n    };\n  }));\n  const [players, setPlayers] = useState(urls.map(url => {\n    return {\n      url,\n      playing: false\n    };\n  }));\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n\n    if (newPlayers[targetIndex].playing === false) {\n      newPlayers[targetIndex].playing = true;\n    } else {\n      newPlayers[targetIndex].playing = false;\n    }\n\n    setPlayers(newPlayers);\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n  useEffect(() => {\n    if (playIsOn) {\n      const timer = setTimeout(() => {\n        sources.forEach((source, i) => {\n          players[i].playing ? source.audio.play() : source.audio.pause();\n        });\n      }, 1000);\n      return () => {\n        setSeconds(8);\n        clearTimeout(timer);\n      };\n    } else {\n      sources.forEach((source, i) => {\n        source.audio.pause();\n      });\n    }\n  });\n  return [players, toggle];\n};\n\n_s(useMultiAudio, \"mM3CZP1J2nFyiHkJqmEWUn0/XKY=\");\n\nconst MultiPlayer = props => {\n  _s2();\n\n  const [players, toggle] = useMultiAudio(props.urls, props.playIsOn);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: players.map((player, i) => /*#__PURE__*/_jsxDEV(Player, {\n      player: player,\n      toggle: toggle(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(MultiPlayer, \"CfYgjYeTyjzOoInnRblJVR3vUyk=\", false, function () {\n  return [useMultiAudio];\n});\n\n_c = MultiPlayer;\nexport default MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["C:/Users/gideo/Desktop/home_test/src/components/MultiPlayer.js"],"names":["React","useState","useEffect","classes","Player","useMultiAudio","urls","playIsOn","seconds","setSeconds","sources","map","url","audio","Audio","players","setPlayers","playing","toggle","targetIndex","newPlayers","currentIndex","findIndex","p","interval","setInterval","clearInterval","timer","setTimeout","forEach","source","i","play","pause","clearTimeout","MultiPlayer","props","player"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./MultiPlayer.module.css\";\r\nimport Player from \"./Player\";\r\n\r\nconst useMultiAudio = (urls, playIsOn) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  const [sources] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        audio: new Audio(url),\r\n      };\r\n    })\r\n  );\r\n\r\n  const [players, setPlayers] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        playing: false,\r\n      };\r\n    })\r\n  );\r\n\r\n  const toggle = (targetIndex) => () => {\r\n    const newPlayers = [...players];\r\n    const currentIndex = players.findIndex((p) => p.playing === true);\r\n    if (newPlayers[targetIndex].playing === false) {\r\n      newPlayers[targetIndex].playing = true;\r\n    } else {\r\n      newPlayers[targetIndex].playing = false;\r\n    }\r\n\r\n    setPlayers(newPlayers);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(seconds - 1);\r\n    }, 1000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (playIsOn) {\r\n      const timer = setTimeout(() => {\r\n        sources.forEach((source, i) => {\r\n          players[i].playing ? source.audio.play() : source.audio.pause();\r\n        });\r\n      }, 1000);\r\n      return () => {\r\n        setSeconds(8);\r\n        clearTimeout(timer);\r\n      };\r\n    } else {\r\n      sources.forEach((source, i) => {\r\n        source.audio.pause();\r\n      });\r\n    }\r\n  });\r\n\r\n  return [players, toggle];\r\n};\r\n\r\nconst MultiPlayer = (props) => {\r\n  const [players, toggle] = useMultiAudio(props.urls, props.playIsOn);\r\n\r\n  return (\r\n    <div>\r\n      {players.map((player, i) => (\r\n        <Player key={i} player={player} toggle={toggle(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MultiPlayer;\r\n"]},"metadata":{},"sourceType":"module"}