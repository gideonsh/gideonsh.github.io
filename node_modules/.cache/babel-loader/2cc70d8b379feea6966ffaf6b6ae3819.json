{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gideo\\\\Desktop\\\\home_test\\\\src\\\\components\\\\MultiPlayer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport classes from \"./MultiPlayer.module.css\";\nimport Player from \"./Player\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useMultiAudio = (urls, playIsOn) => {\n  _s();\n\n  const [seconds, setSeconds] = useState(0);\n  const [sources] = useState(urls.map(url => {\n    return {\n      url,\n      audio: new Audio(url)\n    };\n  }));\n  const [players, setPlayers] = useState(urls.map(url => {\n    return {\n      url,\n      playing: false\n    };\n  }));\n\n  const toggle = targetIndex => () => {\n    const newPlayers = [...players];\n    const currentIndex = players.findIndex(p => p.playing === true);\n\n    if (newPlayers[targetIndex].playing === false) {\n      newPlayers[targetIndex].playing = true;\n    } else {\n      newPlayers[targetIndex].playing = false;\n    } // if (currentIndex !== -1 && currentIndex !== targetIndex) {\n    //   newPlayers[currentIndex].playing = true;\n    //   newPlayers[targetIndex].playing = true;\n    // } else if (currentIndex !== -1) {\n    //   newPlayers[targetIndex].playing = false;\n    // } else {\n    //   newPlayers[targetIndex].playing = true;\n    // }\n\n\n    setPlayers(newPlayers);\n  }; //   useEffect(() => {\n  //     sources.forEach((source, i) => {\n  //       players[i].playing ? source.audio.play() : source.audio.pause();\n  //     });\n  //   }, [sources, players, playIsOn]);\n  //   useEffect(() => {\n  //     if (playIsOn) {\n  //       if (seconds > 0) {\n  //         setTimeout(() => setSeconds(seconds - 1), 1000);\n  //       } else {\n  //         sources.forEach((source, i) => {\n  //           players[i].playing ? source.audio.play() : source.audio.pause();\n  //         });\n  //         setSeconds(8);\n  //       }\n  //     } else {\n  //       sources.forEach((source, i) => {\n  //         players[i].playing ? source.audio.pause() : source.audio.play();\n  //       });\n  //     }\n  //   });\n\n\n  useEffect(() => {\n    if (playIsOn) {\n      if (seconds > 0) {\n        setTimeout(() => setSeconds(seconds - 1), 1000);\n      } else {\n        sources.forEach((source, i) => {\n          players[i].playing ? source.audio.play() : source.audio.pause();\n        });\n        setSeconds(8);\n      }\n    } else {\n      sources.forEach((source, i) => {\n        players[i].playing ? source.audio.pause() : source.audio.play();\n      });\n    }\n  });\n  return [players, toggle];\n};\n\n_s(useMultiAudio, \"AzFu6uNHc67s7pikFWCx1D9P8R8=\");\n\nconst MultiPlayer = props => {\n  _s2();\n\n  const [players, toggle] = useMultiAudio(props.urls, props.playIsOn);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: players.map((player, i) => /*#__PURE__*/_jsxDEV(Player, {\n      player: player,\n      toggle: toggle(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}; // const Player = ({ player, toggle }) => (\n//   <button className={classes.pad} onClick={toggle}>\n//     {player.playing ? \"On\" : \"Off\"}\n//   </button>\n// );\n\n\n_s2(MultiPlayer, \"CfYgjYeTyjzOoInnRblJVR3vUyk=\", false, function () {\n  return [useMultiAudio];\n});\n\n_c = MultiPlayer;\nexport default MultiPlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"MultiPlayer\");","map":{"version":3,"sources":["C:/Users/gideo/Desktop/home_test/src/components/MultiPlayer.js"],"names":["React","useState","useEffect","classes","Player","useMultiAudio","urls","playIsOn","seconds","setSeconds","sources","map","url","audio","Audio","players","setPlayers","playing","toggle","targetIndex","newPlayers","currentIndex","findIndex","p","setTimeout","forEach","source","i","play","pause","MultiPlayer","props","player"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport classes from \"./MultiPlayer.module.css\";\r\nimport Player from \"./Player\";\r\n\r\nconst useMultiAudio = (urls, playIsOn) => {\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  const [sources] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        audio: new Audio(url),\r\n      };\r\n    })\r\n  );\r\n\r\n  const [players, setPlayers] = useState(\r\n    urls.map((url) => {\r\n      return {\r\n        url,\r\n        playing: false,\r\n      };\r\n    })\r\n  );\r\n\r\n  const toggle = (targetIndex) => () => {\r\n    const newPlayers = [...players];\r\n    const currentIndex = players.findIndex((p) => p.playing === true);\r\n    if (newPlayers[targetIndex].playing === false) {\r\n      newPlayers[targetIndex].playing = true;\r\n    } else {\r\n      newPlayers[targetIndex].playing = false;\r\n    }\r\n\r\n    // if (currentIndex !== -1 && currentIndex !== targetIndex) {\r\n    //   newPlayers[currentIndex].playing = true;\r\n    //   newPlayers[targetIndex].playing = true;\r\n    // } else if (currentIndex !== -1) {\r\n    //   newPlayers[targetIndex].playing = false;\r\n    // } else {\r\n    //   newPlayers[targetIndex].playing = true;\r\n    // }\r\n    setPlayers(newPlayers);\r\n  };\r\n\r\n  //   useEffect(() => {\r\n  //     sources.forEach((source, i) => {\r\n  //       players[i].playing ? source.audio.play() : source.audio.pause();\r\n  //     });\r\n  //   }, [sources, players, playIsOn]);\r\n\r\n  //   useEffect(() => {\r\n  //     if (playIsOn) {\r\n  //       if (seconds > 0) {\r\n  //         setTimeout(() => setSeconds(seconds - 1), 1000);\r\n  //       } else {\r\n  //         sources.forEach((source, i) => {\r\n  //           players[i].playing ? source.audio.play() : source.audio.pause();\r\n  //         });\r\n  //         setSeconds(8);\r\n  //       }\r\n  //     } else {\r\n  //       sources.forEach((source, i) => {\r\n  //         players[i].playing ? source.audio.pause() : source.audio.play();\r\n  //       });\r\n  //     }\r\n  //   });\r\n\r\n  useEffect(() => {\r\n    if (playIsOn) {\r\n      if (seconds > 0) {\r\n        setTimeout(() => setSeconds(seconds - 1), 1000);\r\n      } else {\r\n        sources.forEach((source, i) => {\r\n          players[i].playing ? source.audio.play() : source.audio.pause();\r\n        });\r\n        setSeconds(8);\r\n      }\r\n    } else {\r\n      sources.forEach((source, i) => {\r\n        players[i].playing ? source.audio.pause() : source.audio.play();\r\n      });\r\n    }\r\n  });\r\n\r\n  return [players, toggle];\r\n};\r\n\r\nconst MultiPlayer = (props) => {\r\n  const [players, toggle] = useMultiAudio(props.urls, props.playIsOn);\r\n\r\n  return (\r\n    <div>\r\n      {players.map((player, i) => (\r\n        <Player key={i} player={player} toggle={toggle(i)} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\n// const Player = ({ player, toggle }) => (\r\n//   <button className={classes.pad} onClick={toggle}>\r\n//     {player.playing ? \"On\" : \"Off\"}\r\n//   </button>\r\n// );\r\n\r\nexport default MultiPlayer;\r\n"]},"metadata":{},"sourceType":"module"}